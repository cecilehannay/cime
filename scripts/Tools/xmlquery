#!/usr/bin/env perl
BEGIN{
    my $cimeroot = $ENV{CIMEROOT};
#   This is the only place we should use die.  Once the perl library
#   location is found we can use the $logger->logdie() function
    die "CIMEROOT environment variable not set" unless defined $cimeroot;
    die "CIMEROOT directory \"$cimeroot\" not found" unless (-d $cimeroot);
    unshift @INC, "$cimeroot/utils/perl5lib";
    require CIME::Base;
}
use CIME::Base;

use CIME::Case;

my %opts = (
    fileonly		=>0,
    valonly		=>0,
    value	        =>0,
    noexpandxml	        =>0,
    help		=>0,
    listall		=>0,
    loglevel		=>"INFO",
    );

CIME::Base->getopts(\%opts);

my $level = Log::Log4perl::Level::to_priority($opts{loglevel});
Log::Log4perl->easy_init({level=>$level,
			  layout=>'%m%n'});
my $logger = get_logger();

GetOptions(
    "fileonly"     => \$opts{'fileonly'},
    "valonly"      => \$opts{'valonly'},
    "value"        => \$opts{'value'},
    "noexpandxml"  => \$opts{'noexpandxml'},
)  or pod2usage(2);
pod2usage(1) if($opts{help});

my $cimeroot = $ENV{CIMEROOT};

my $Case = CIME::Case->new($cimeroot, ".");

my @idlist = split(',',shift(@ARGV));

if(@ARGV) {
    $logger->logdie( "ERROR: unrecognized arguments: @ARGV
            A list of ID's needs to be comma-delimited with NO-WHITESPACE!");
    pod2usage(1);
}

foreach my $id (@idlist){
    $Case->PrintEntry($id,\%opts);
}




__END__
=head1 NAME

xmlquery - Query fields in the case xml files.

=head1 SYNOPSIS

    xmlquery id [options] 
    Options:
       -fileonly         Only print the filename that the field is defined in.
       -valonly          Only print the field name and value.
       -value            Only print the value.
       -noexpandxml      Do not resolve variables before printing
       -help             brief help message
       -loglevel <level> set stdout message verbosity
       -model <name>     Specifies target model system.
       -cimeroot <path>  Path to the root directory of the cime source code

=head1 OPTIONS

=over 8

=item B<-fileonly>

    Only print the filename that the field is defined in.

=item B<-valonly>

    Print the field name and value only.

=item B<-value>

    Print only the current value setting of the field.

=item B<-noexpandxml>

    Do not expand embedded variables.

=item B<-help>

    Prints a brief help message and exits.

=item B<-loglevel> Set the verbosity level of this script, levels are:

=over 4

=item DEBUG (most verbose)

=item INFO (default)

=item WARN

=item ERROR

=item FATAL(least verbose) 

=back

=item B<-cimeroot>

Path to the root directory of the cime source code. This can also be set as an environment variable CIMEROOT.  The command line option takes precidence.  

=item B<-model>

The name of the model coupled with cime.  Allowed values are the names of the 
directories under cime/cime_config.  

=back

=back

=head1 DESCRIPTION

B<xmlquery> 

=head1 AUTHOR AND CREDITS

{author name and e-mail}

Based on legacy code with many contributers.

=head1 COPYRIGHT AND LICENSE


This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

=cut
