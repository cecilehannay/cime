#!/usr/bin/env perl
BEGIN{
    use Cwd qw(getcwd abs_path chdir);
# create_newcase can only be run from the cime/scripts directory
    my $cimeroot = abs_path("../");
#   This is the only place we should use die.  Once the perl library
#   location is found we can use the $logger->logdie() function
    die "CIMEROOT environment variable not set" unless defined $cimeroot;
    die "CIMEROOT directory \"$cimeroot\" not found" unless (-d $cimeroot);
    unshift @INC, "$cimeroot/utils/perl5lib";
    require CIME::Base;
}

use CIME::Base;
use CIME::Case;
# need to reinitialize cimeroot
my $cimeroot = abs_path("../");
my %opts;
$opts{loglevel}="INFO";

# Save commandline
my $commandline = "create_newcase @ARGV";

CIME::Base->getopts(\%opts);

GetOptions(
    "case=s"                    => \$opts{'case'},
    "compset=s"                 => \$opts{'compset'},
    "confopts=s"                => \$opts{'confopts'},
    "project=s"                 => \$opts{'project'},  
    "compiler=s"                => \$opts{'compiler'},  
    "mpilib=s"                  => \$opts{'mpilib'},  
    "res=s"                     => \$opts{'res'},
    "mach=s"                    => \$opts{'mach'},
    "mach_dir=s"                => \$opts{'mach_dir'},
    "model=s"                   => \$opts{'model'},
    "pecount=s"                 => \$opts{'pecount'},
    "petype=s"                  => \$opts{'petype'},
    "pes_file=s"                => \$opts{'pes_file'}, 
    "srcroot"                   => \$opts{'srcroot'},
    "scratchroot"               => \$opts{'scratchroot'},
    "testname=s"                => \$opts{'testname'},
    "testlist"                  => \$opts{'testlist'},
    "sharedlibroot=s"           => \$opts{'sharedlibroot'},
    "user_mods_dir=s"           => \$opts{'user_mods_dir'},
    "user_grid_file=s"          => \$opts{'user_grid_file'},
    "user_compset=s"            => \$opts{'user_compset'},
    )  or pod2usage(2);
pod2usage(1) if($opts{help});

my $level = Log::Log4perl::Level::to_priority($opts{loglevel});
Log::Log4perl->easy_init({level=>$level,
			  layout=>'%F{1}: %m%n'});

my $logger = get_logger();

my $Case = CIME::Case->new($cimeroot);

_check_input_options ($Case, \%opts);

$Case->configure();

_create_caseroot($Case);

$Case->WriteCaseXML();

#$Case->WriteCase();

#-------------------------------------------------------------------------------
sub _create_caseroot
{
    # Create caseroot directory and all necessary sub directories
    my ($Case) = @_;

    my $caseroot = $Case->GetValue('CASEROOT');

    $logger->info( "Creating $caseroot ");
    if(! -e $caseroot){
	mkdir ("$caseroot") or $logger->logdie("Failed to create $caseroot directory");
    }
    chdir ("$caseroot");

    # Create relevant directories in $caseroot
    my @newdirs = qw(. SourceMods LockedFiles Buildconf Tools);
    foreach my $newdir ( @newdirs ) {
	mkpath($newdir); 
    }

    # Open a new README.case file in $caseroot
    my $file = "$caseroot/README.case";
    my $fh = IO::File->new($file, '>' ) or $logger->logdie( "can't open file: $file\n");
    print $fh "$commandline\n\n\n";
    $fh->close;

    # Copy README/disclaimer file 
    #TODO - this needs to be updated
    #$sysmod = "cp $cimeroot/scripts/README $caseroot/README.science_support";
    #system($sysmod) == 0 or $logger->logdie( "ERROR: $sysmod failed: $?\n");

    _create_caseroot_sourcemods($Case);  
    _create_caseroot_tools($Case);
#    _create_caseroot_files($Case);
}



#-------------------------------------------------------------------------------
sub _create_caseroot_sourcemods
{
    my ($Case) = @_;  

    my $caseroot   = $Case->GetValue('CASEROOT');
    my $cimeroot   = $Case->GetValue('CIMEROOT');

    my @components = $Case->Compset_Components();

    # Create sourcemods
    foreach my $comp (@components)  {
	mkpath("$caseroot/SourceMods/src.$comp"); 

	# Note: this is CESM specific given that we are referencing cism explitly
	if ($comp eq 'cism') {
	    mkpath("$caseroot/SourceMods/src.cism/glimmer-cism");
	    open(README, ">", "$caseroot/SourceMods/src.$comp/README") or
		$logger->logdie( "cannot open > $caseroot/SourceMods/src.cism/README: $!");
	    print README
		"Put source mods for the glimmer-cism library in the glimmer-cism subdirectory.\n",
		"This includes any files that are in the glimmer-cism subdirectory of $cimeroot/../components/cism.\n\n",
		"Anything else (e.g., mods to source_glc or drivers) goes in this directory, NOT in glimmer-cism/.\n";
	    close(README);
	}

    }
    mkpath("$caseroot/SourceMods/src.share"); 
    mkpath("$caseroot/SourceMods/src.drv"); 
}

sub _create_caseroot_tools
{
    # Copy relevant files into $caseroot
    my ($Case) = @_;

    my $cimeroot = $Case->GetValue('CIMEROOT');
    my $caseroot = $Case->GetValue('CASEROOT');

    my $sysmod;

    my @files = (
	"$cimeroot/scripts/Tools/case_setup", 
	"$cimeroot/scripts/Tools/testcase_setup", 
	"$cimeroot/scripts/Tools/check_input_data", 
	"$cimeroot/scripts/Tools/archive_metadata.sh", 
	"$cimeroot/scripts/Tools/check_case", 
	"$cimeroot/scripts/Tools/create_production_test", 
	"$cimeroot/scripts/Tools/xmlchange",
	"$cimeroot/scripts/Tools/xmlquery",
	"$cimeroot/scripts/Tools/st_archive", 
	"$cimeroot/scripts/Tools/README.post_process", 
	); 

    foreach my $file (@files) {
	cp($file,"$caseroot/"); 
    }

    chmod 0755, "$caseroot/create_production_test";
    
    my $machines_dir  = $Case->GetValue('MACHDIR');
    $machines_dir = $Case->GetResolvedValue($machines_dir);
    my $model = $Case->GetValue('MODEL');
    
    # Copy relevant files into $caseroot/Tools/
    @files = ("$cimeroot/cime_config/${model}/archive.xml",
	      "$cimeroot/cime_config/${model}/archive.xsd",
	      "$cimeroot/scripts/Tools/check_lockedfiles", 
	      "$cimeroot/scripts/Tools/lt_archive.sh", 
	      "$cimeroot/scripts/Tools/st_archive", 
	      "$cimeroot/scripts/Tools/getTiming", 
	      "$cimeroot/scripts/Tools/compare_namelists.pl",
	      "$machines_dir/taskmaker.pl", 
	      "$machines_dir/Makefile",
	      "$machines_dir/mkSrcfiles", 
	      "$machines_dir/mkDepends"); 
    
    foreach my $file (@files) {
	
	cp($file, "$caseroot/Tools/") or $logger->warn("Could not copy $file to case"); 
    }
}



sub _check_input_options
{
    my ($Case,$opts) = @_;
    
    # Values in uppercase here have a direct correspondence to Entries in the case XML files
    # Values in lowercase will need to have further handling

    if (!$opts->{'testlist'}) {
	# Check for manditory case input
	if ($opts->{'case'}) {
	    if (-d $opts->{'case'}) {
		$logger->logdie("Case directory $opts->{case} already exists ");
	    }	 
	    my $case = $opts->{'case'};

	    if($case =~ /^\/([^\/]+)/){  # full path is given
		$Case->SetValue('CASEROOT',abs_path($case));
		$Case->SetValue('CASE',$1);
	    }else{
		$Case->SetValue('CASEROOT',abs_path('.')."/".$case);
		$Case->SetValue('CASE',$case);
	    }
	    
	} else {
	    $logger->logdie("ERROR: create_newcase must include the input argument, -case ");
	}
	if ($opts->{srcroot}){
	    $Case->SetValue("SRCROOT",abs_path($opts->{srcroot}));
	}else{
	    $Case->SetValue("SRCROOT",$Case->GetValue("CIMEROOT")."/../");
	}

	if ($opts->{'model'}) {
	    $Case->SetValue('MODEL',$opts->{'model'});
	} else {
	    $Case->SetValue('MODEL','cesm');
	}

	if($opts->{user_grid_file}){
	    if(-f $opts->{user_grid_file}){
		$Case->SetValue("GRIDS_SPEC_FILE",$opts->{user_grid_file});
	    }else{
		$logger->logdie("$opts->{user_grid_file} could not be found");
	    }
	}


	# Check for manditory compset input
	if ($opts->{'compset'}) {
	    $Case->SetValue('COMPSET',$opts->{'compset'});
	} else {
	    if (!$opts->{'user_compset'}) {
		$logger->logdie ("ERROR: create_newcase must include the input argument, -compset OR user_compset");
	    }
	    $Case->SetValue('COMPSET',$opts->{user_compset});
	}
	# Check for mandatory grid input
	if ($opts->{'res'}) {
	    $Case->SetValue('GRID',$opts->{'res'});
	} else {
	    $logger->logdie ("ERROR: create_newcase must include the input argument, -res");
	}
	if($opts->{mach_dir}){
	    $Case->SetValue('MACHDIR',$opts->{mach_dir});
	}else{
	    $Case->SetValue('MACHDIR',"\$CIMEROOT/cime_config/\$MODEL/machines");
	}
	# Check for manditory machine input
	if ($opts->{'mach'}) {
	    $Case->SetValue('MACH', $opts->{'mach'});
	} else {
	    $logger->logdie ("ERROR: create_newcase must include the input argument, -mach \n");
	}
	# Check if machine compiler option is given
	if ($opts->{'compiler'}) {
	    $Case->SetValue('COMPILER',$opts->{'compiler'});
	}
	# Check if machine mpilib option is given
	if ($opts->{'mpilib'}) {
	    $Case->SetValue('MPILIB', $opts->{'mpilib'});
	}
	# Check for pecount setting
	if ($opts->{'pecount'}) {
	    $Case->SetValue('pecount', $opts->{'pecount'});
	}
	if ($opts->{confopts}){
	    $Case->SetValue('confopts',$opts->{confopts});
	}


    }
}




__END__
=head1 create_newcase

create_newcase - CIME script to create a model case

=head1 SYNOPSIS

    create_newcase -case casename -compset compest -res res -mach machine [options]

=head1 OPTIONS

=over 8

=item B<-case> <name> 

Specifies the case name (required).

=item B<-compset> <name> 

Specify a compset (required).

=item B<-res> <name>

Specify a grid resolution (required).

=item B<-mach> <name>

Specify a machine (required).

=item B<-pes_file> <name>         

Full pathname of pes file to use (will overwrite default settings) (optional)

=item B<-project> <name>          

Specify a project id for the case (optional)
default: user-specified environment variable PROJECT or ACCOUNT
or read from ~/.cesm_proj or ~/.ccsm_proj

=item B<-compiler> <name>         

Specify a compiler for the target machine (optional)
default: default compiler for the target machine

=item B<-mpilib> <name>           

Specify a mpi library for the target machine (optional)
default: default mpi library for the target machine
allowed: openmpi, mpich, ibm, mpi-serial, etc
redundant with _M confopts setting

=item B<-mach_dir> <path>         

Specify the locations of the Machines directory (optional).
default: \$cimeroot/cime_config/$model/machines

=item B<-user_mods_dir> <path>    

Path to directory with user_nl_* files and xmlchange
commands to utilize (optional). For non-test cases, this 
can also include SourceMods

=item B<-confopts> <value>  

Specify some additional configuration options (optional) as follows:

=over 4
                 
=item _AOA  = aoflux on atm grid

=item _AOE  = aoflux on exch grid

=item _CG   = gregorian calendar

=item _D    = debug

=item _E    = esmf interfaces

=item _IOP* = PnetCDF IO test where * is  A(atm), C(cpl), G(glc), 
                    I(ice), L(lnd), O(ocn), W(wav) or blank (all components)

=item _L*   = set run length y, m, d, h, s, n(nsteps) plus integer 
                                   (ie _Lm6 for 6 months) 

=item _M*   = set the mpilib where * is default, mpi-serial, mpich, etc

=item _N*   = set NINST_ env value to * where * is an integer

=item _P*   = set pecount to specific values include 
                T,S,M,L,X,1,1x1,16,16x1,4x4,16x1D, etc

=back

=item B<-petype>  <name> 

Valid values are [threaded | mpionly] 
                           Force pes to be all threaded or all mpi
			   default: this is not set

=item B<-pecount> <name>          

Value of S,M,L,X1,X2 (optional). 
                           default: M, partially redundant with confopts _P

=item B<-user_compset> <name>     

Long name for new user compset to use (optional)
This assumes that all of the compset settings in the 
long name have been defined in cime_config/config_compsets.xml

=item B<-user_grid_file> <name>   

Full pathname of grid file to use (optional)
This should be a "copy" of cime_config/config_grids.xml
with the new user grid changes added to it

=item B<-testlist>

List valid values for tests [normally only invoked by create_test] (optional).

=item B<-sharedlibroot

Used for re-using build components when building multiple cases, 
default is \$EXEROOT

=item B<-help>

Prints a brief help message and exits.

=item B<-loglevel> Set the verbosity level of this script, levels are:

=over 4

=item DEBUG (most verbose)

=item INFO (default)

=item WARN

=item ERROR

=item FATAL(least verbose) 

=back

=item B<-cimeroot>

Path to the root directory of the cime source code. This can also be set as an environment variable CIMEROOT.  The command line option takes precidence.  

=item B<-model>

The name of the model coupled with cime.  Allowed values are the names of the 
directories under cime/cime_config.  

=back
=back

=head1 DESCRIPTION

B<create_newcase> creates the directory $CASEROOT, which is specified by the -case option. In $CASEROOT, create_newcase installs the files and directories that are responsible for configuring, building, and running the case. 


=head1 EXAMPLES

=over 4

=item  ./create_newcase -case mycase1 -res f19_g16 -compset B1850CN -mach yellowstone

=item  ./create_newcase -case mycase2 -res f19_g16 -compset B1850CN -mach yellowstone -confopts _D_P16

=item  ./create_newcase -case mycase5 -res f19_g16 -compset B1850CN -mach yellowstone -confopts _CG_E -pes_file mypes_file

=back

=head1 AUTHOR AND CREDITS

{name and e-mail}

{Other credits}

=head1 COPYRIGHT AND LICENSE


This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

=cut
